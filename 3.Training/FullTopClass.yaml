preprocess:
  method: auto
  data_fraction: 1

new_variables:
### [format] name: formula
### can use functions from `math`, `np` (numpy), and `awkward` in the expression
  pfmask    : ak.ones_like(pfcand_e)
  pfcand_px : pfcand_p * np.sin(pfcand_theta) * np.cos(pfcand_phi)
  pfcand_py : pfcand_p * np.sin(pfcand_theta) * np.sin(pfcand_phi)
  pfcand_pz : pfcand_p * np.cos(pfcand_theta)


inputs:
  pf_points:
    vars:
      - pfcand_thetarel
      - pfcand_phirel
    length: 280
    
  pf_features:
    vars:
      - pfcand_erel_log
      - pfcand_dptdpt
      - pfcand_detadeta
      - pfcand_dphidphi
      - pfcand_dxydxy
      - pfcand_dzdz
      - pfcand_dxydz
      - pfcand_dphidxy
      - pfcand_dlambdadz
      - pfcand_dxyc
      - pfcand_dxyctgtheta
      - pfcand_phic
      - pfcand_phidz
      - pfcand_phictgtheta
      - pfcand_cdz
      - pfcand_cctgtheta
      - pfcand_charge
      - pfcand_isMu
      - pfcand_isEl
      - pfcand_isChargedHad
      - pfcand_isGamma
      - pfcand_isNeutralHad
      - pfcand_type
      - pfcand_dxy
      - pfcand_dz
      - pfcand_btagSip2dVal
      - pfcand_btagSip2dSig
      - pfcand_btagSip3dVal
      - pfcand_btagSip3dSig
      - pfcand_btagJetDistVal
      - pfcand_btagJetDistSig
      - pfcand_theta
      - pfcand_phi
    length: 280


  pf_vectors:
    length: 280
    pad_mode: wrap
    vars: 
      - [pfcand_px, null]
      - [pfcand_py, null]
      - [pfcand_pz, null]
      - [pfcand_e, null]
      
  pf_mask:
    length: 280
    pad_mode: constant
    vars: 
      - [pfmask, null]

labels:
  type: simple
  value: [recojet_isT, recojet_isJ]


observers:
      - jet_p
      - jet_e
      - jet_mass
      - jet_phi
      - jet_theta
      - jet_nconst
      - jet_nmu
      - jet_nel
      - jet_nchad
      - jet_ngamma
      - jet_nnhad
      - jet_npfcand
